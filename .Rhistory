geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25,0.25,0.25,0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "LineGraph", i , ".png", sep=""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData,
"Experiment0.csv",
sep = ""))
# =============================================================================
# --- create and save line graphs ---
# Loop through all model runs.
for (i in unique(TimeData[TimeData$conform.fixation == T,]$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25,0.25,0.25,0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep=""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# =============================================================================
# --- calculate mortality data ---
View(TimeData)
#
#
# MAIN
# The main project file. Run this before running other scripts in the project.
#
#
# =============================================================================
# --- version ---
R.version.string  # "R version 4.0.3 (2020-10-10)"
# =============================================================================
# --- global variables ---
wk.dir <- getwd()
# =============================================================================
# ---- libraries ----
# Install libraries needed for the project.
# install.packages("ggplot2")
###
###
# Load the libraries needed for the project to run.
library(ggplot2)
###
###
# =============================================================================
# --- folder management ---
# Store names of the project folders.
folder.names <- c("1.Data", "2.Results","3.Figures")
# Create each folder if it doesn't already exist.
for(i in 1:length(folder.names)){
if(file.exists(folder.names[i]) == FALSE){
dir.create(folder.names[i])
}
}
# Store the file path to each folder.
PathData <- paste(wk.dir, "/", folder.names[1], "/", sep = "")
PathResults <- paste(wk.dir, "/", folder.names[2], "/", sep = "")
PathFigures <- paste(wk.dir, "/", folder.names[3], "/", sep = "")
# =============================================================================
# --- run scripts ---
###
###
###
# ==== end =================================================================
TimeData <- read.csv(paste(PathData,
"FullRuns.csv",
sep = ""))
for (i in TimeData$run.number) { print(i)}
for (i in unique(TimeData$run.number)) { print(i)}
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData,
"FullRuns.csv",
sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25,0.25,0.25,0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep=""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.05, 0.2), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
run.plot
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.04, 0.21), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
run.plot
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.05, 0.2), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
run.plot
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData,
"FullRuns.csv",
sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep=""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# =============================================================================
# --- create and save graphs of mortality rates ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.025, 0.225), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Mortality", i , ".png", sep=""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData,
"FullRuns.csv",
sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep = ""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# =============================================================================
# --- create and save graphs of mortality rates ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.025, 0.225), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Mortality", i , ".png", sep = ""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality),
col = "orangered3", alpha = 0.5) +
geom_line(aes(y = conformist.mortality),
col = "black", alpha = 0.5) +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.025, 0.225), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
run.plot
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality),
col = "orangered3", alpha = 0.5) +
geom_line(aes(y = conformist.mortality),
col = "black", alpha = 0.5) +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.025, 0.225), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Mortality", i , ".png", sep = ""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = contrarian.mortality), col = "orangered3") +
geom_line(aes(y = conformist.mortality), col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.025, 0.225), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Mortality", i , ".png", sep = ""),
height = 4,
width = 6)
print(run.plot)
dev.off()
}

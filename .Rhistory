ggsave(paste(PathFigures, "ExampleRuns.png", sep = ""),
height = 4, width = 6)
print(full.runs)
dev.off()
# Create labeller for transition probabilities.
run.labs <- c(`1` = "T = 0.01, S = 5", `10` = "T = 0.05, S = 50")
# Create the plots.
run.10 <- ggplot(TimeData[TimeData$run.number == 1 |
TimeData$run.number == 10,],
aes(x = step, y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
facet_grid(run.number ~ ., labeller = as_labeller(run.labs)) +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "ExampleRuns.png", sep = ""),
height = 4, width = 6)
print(full.runs)
dev.off()
# Create the plot for Run 10.
run.10 <- ggplot(TimeData[TimeData$run.number == 4,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
run.10
# Create the plot for Run 10.
run.4 <- ggplot(TimeData[TimeData$run.number == 4,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "ExampleRuns.png", sep = ""),
height = 4, width = 6)
print(run.4)
dev.off()
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData, "FullRuns.csv", sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Mean Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep = ""),
height = 4, width = 6.5)
print(run.plot)
dev.off()
}
TransitionData <- read.csv(paste(PathData,
"ConformByPTransition.csv",
sep = ""))
#
#
# MAIN
# The main project file. Run this before running other scripts in the project.
#
#
# =============================================================================
# --- version ---
R.version.string  # "R version 4.0.3 (2020-10-10)"
# =============================================================================
# --- global variables ---
wk.dir <- getwd()
# =============================================================================
# ---- libraries ----
# Install libraries needed for the project.
# install.packages("ggplot2")
# install.packages("gridExtra")
###
###
# Load the libraries needed for the project to run.
library(ggplot2)
library(gridExtra)
###
###
# =============================================================================
# --- folder management ---
# Store names of the project folders.
folder.names <- c("1.Data","2.Figures")
# Create each folder if it doesn't already exist.
for(i in 1:length(folder.names)){
if(file.exists(folder.names[i]) == FALSE){
dir.create(folder.names[i])
}
}
# Store the file path to each folder.
PathData <- paste(wk.dir, "/", folder.names[1], "/", sep = "")
PathFigures <- paste(wk.dir, "/", folder.names[2], "/", sep = "")
# =============================================================================
# --- run scripts ---
source("Functions.R")
# ==== end =================================================================
# Scatter plot of mean probability of conformity at the end of the simulation
# (time step 7500) vs. the environmental transition probability. The probability
# of conformity began at 1 (i.e., fixation), and contrarians later invaded.
mean.conform.vs.transition <- ggplot(TransitionData,
aes(x = p.transition,
y = mean.p.conform)) +
geom_point(col = "grey") +
geom_smooth(method = "lm",
formula = "y ~ x",
se = F,
col = "black") +
xlab("Environmental Transition Probability") +
ylab("Mean Probability of Conformity") +
scale_y_continuous(limits = c(0, 1)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99", colour = "grey80"))
TransitionData <- read.csv(paste(PathData,
"ConformByPTransition.csv",
sep = ""))
# Scatter plot of mean probability of conformity at the end of the simulation
# (time step 7500) vs. the environmental transition probability. The probability
# of conformity began at 1 (i.e., fixation), and contrarians later invaded.
mean.conform.vs.transition <- ggplot(TransitionData,
aes(x = p.transition,
y = mean.p.conform)) +
geom_point(col = "grey") +
geom_smooth(method = "lm",
formula = "y ~ x",
se = F,
col = "black") +
xlab("Environmental Transition Probability") +
ylab("Mean Probability of Conformity") +
scale_y_continuous(limits = c(0, 1)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99", colour = "grey80"))
mean.conform.vs.transition
mean.conform.vs.transition <- ggplot(TransitionData,
aes(x = p.transition,
y = mean.p.conform)) +
geom_point(col = "grey") +
geom_smooth(method = "lm",
formula = "y ~ x",
se = F,
col = "black") +
xlab("Environmental Transition Probability") +
ylab("Mean Probability of Conformity") +
scale_y_continuous(limits = c(0, 1)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99", colour = "grey80"))
# R^2 = 0.8394212.
cor(TransitionData$mean.p.conform, TransitionData$p.transition)^2
# Regression line equation: y = 0.9181 - 0.8342x
lm(mean.p.conform ~ p.transition, TransitionData)
# Save scatter plot
ggsave(paste(PathFigures, "MeanConformVsTransition.png", sep = ""),
height = 4, width = 6.5)
print(mean.conform.vs.transition)
dev.off()
TransitionData <- read.csv(paste(PathData,
"ConformByPTransition.csv",
sep = ""))
TimeData <- read.csv(paste(PathData,
"FullRuns.csv",
sep = ""))
MortalityData <- read.csv(paste(PathData,
"Mortality.csv",
sep = ""))
#
#
# PLOTS
# Visualize the relationships between the model variables.
#
#
# =============================================================================
# --- load data ---
TransitionData <- read.csv(paste(PathData,
"ConformByPTransition.csv",
sep = ""))
MortalityData <- read.csv(paste(PathData,
"Mortality.csv",
sep = ""))
# =============================================================================
# --- conformity vs. probability of environmental transition ---
# Scatter plot of mean probability of conformity at the end of the simulation
# (time step 7500) vs. the environmental transition probability. The probability
# of conformity began at 1 (i.e., fixation), and contrarians later invaded.
mean.conform.vs.transition <- ggplot(TransitionData,
aes(x = p.transition,
y = mean.p.conform)) +
geom_point(col = "grey") +
geom_smooth(method = "lm",
formula = "y ~ x",
se = F,
col = "black") +
xlab("Environmental Transition Probability") +
ylab("Mean Probability of Conformity") +
scale_y_continuous(limits = c(0, 1)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99", colour = "grey80"))
# R^2 = 0.8394212.
cor(TransitionData$mean.p.conform, TransitionData$p.transition)^2
# Regression line equation: y = 0.9181 - 0.8342x
lm(mean.p.conform ~ p.transition, TransitionData)
# Save scatter plot
ggsave(paste(PathFigures, "MeanConformVsTransition.png", sep = ""),
height = 4, width = 6.5)
print(mean.conform.vs.transition)
dev.off()
# =============================================================================
# --- mortality by social type ---
# Get the mean of each variable for each run.
avg.mort <- aggregate(MortalityData, by = list(MortalityData$run), mean,
na.rm = T)
# Create a tidy data frame of mortality rates for both social types by run.
# and transition probability.
tidy.mort <- data.frame("run.number" = avg.mort$run.number,
"type" = "conformist",
"p.transition" = avg.mort$p.transition,
"mortality" = avg.mort$conformist.mortality)
tidy.mort <- rbind(tidy.mort,
data.frame("run.number" = avg.mort$run.number,
"type" = "contrarian",
"p.transition" = avg.mort$p.transition,
"mortality" = avg.mort$contrarian.mortality))
# Create labeller for transition probabilities.
transition.labs <- c(`0.01` = "T = 0.01",
`0.25` = "T = 0.25",
`0.75` = "T = 0.75")
# Create jittered strip plots comparing mortality between the two groups
# for each transition probability.
mort.plot <- ggplot(tidy.mort, aes(x = type, y = mortality)) +
geom_jitter() +
facet_grid(~ p.transition, labeller = as_labeller(transition.labs)) +
ylab("Time-Average Mortality Rate") +
theme_light() +
theme(panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
strip.text = element_text(color = "black"),
strip.background = element_rect(fill = "grey90", color = "darkgrey"))
# Start PNG
ggsave(paste(PathFigures, "MortalityBySocialType.png", sep = ""),
height = 4, width = 6.5)
# Add the plot to the PNG
print(mort.plot)
# END PNG
dev.off()
View(tidy.mort)
# Conformists at p.transition = 0.01:
mean(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.01])
sd(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.01])
# Contrarians at p.transition = 0.01: mean = 0.08259952, sd = 0.002511913.
mean(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.01])
sd(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.01])
# Conformists at p.transition = 0.01: mean = 0.08259952, sd = 0.002511913.
mean(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.25])
sd(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.25])
# Contrarians at p.transition = 0.01: mean = 0.156766, sd = 0.001441084
mean(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.25])
sd(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.25])
# Conformists at p.transition = 0.75: mean = 0.1192904, sd = 0.0008687777.
mean(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.75])
sd(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.75])
# Contrarians at p.transition = 0.75: mean = 0.1268624, sd = 0.000903642
mean(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.75])
sd(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.75])
# Contrarians at p.transition = 0.01: mean = 0.156766, sd = 0.001441084.
mean(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.01])
sd(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.01])
# Conformists at p.transition = 0.25: mean = 0.1192904, sd = 0.0008687777.
mean(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.25])
sd(tidy.mort$mortality[tidy.mort$type == "conformist" &
tidy.mort$p.transition == 0.25])
# Contrarians at p.transition = 0.75: mean = 0.1202956, sd = 0.0005298751
mean(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.75])
sd(tidy.mort$mortality[tidy.mort$type == "contrarian" &
tidy.mort$p.transition == 0.75])
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData, "FullRuns.csv", sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep = ""),
height = 4, width = 6.5)
print(run.plot)
dev.off()
}
#
#
# MAIN
# The main project file. Run this before running other scripts in the project.
#
#
# =============================================================================
# --- version ---
R.version.string  # "R version 4.0.3 (2020-10-10)"
# =============================================================================
# --- global variables ---
wk.dir <- getwd()
# =============================================================================
# ---- libraries ----
# Install libraries needed for the project.
# install.packages("ggplot2")
# install.packages("gridExtra")
###
###
# Load the libraries needed for the project to run.
library(ggplot2)
library(gridExtra)
###
###
# =============================================================================
# --- folder management ---
# Store names of the project folders.
folder.names <- c("1.Data","2.Figures")
# Create each folder if it doesn't already exist.
for(i in 1:length(folder.names)){
if(file.exists(folder.names[i]) == FALSE){
dir.create(folder.names[i])
}
}
# Store the file path to each folder.
PathData <- paste(wk.dir, "/", folder.names[1], "/", sep = "")
PathFigures <- paste(wk.dir, "/", folder.names[2], "/", sep = "")
# =============================================================================
# --- run scripts ---
source("Functions.R")
# ==== end =================================================================
#
#
# LINE GRAPHS
# Visualize over-time data from model runs.
#
#
# =============================================================================
# --- load data ---
TimeData <- read.csv(paste(PathData, "FullRuns.csv", sep = ""))
# =============================================================================
# --- create and save graphs of model runs ---
# Loop through all model runs.
for (i in unique(TimeData$run.number)) {
# Create line plot for this model run.
run.plot <- ggplot(TimeData[TimeData$run.number == i,],
aes(x = step,
y = mean.p.conform)) +
geom_rect(aes(NULL,
NULL,
xmin = step,
xmax = dplyr::lead(step),
ymin = -Inf,
ymax = Inf,
fill = environment)) +
geom_line(aes(y = mean.action), col = "orangered3") +
geom_line(col = "black") +
xlab("Time Step") +
ylab("Value") +
scale_x_continuous(limits = c(0, 2000), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +
scale_fill_gradient(low = "grey99", high = "grey92") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white",
color = "white"),
legend.position = "none",
plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), "in"))
# Save Image
ggsave(paste(PathFigures, "Run", i , ".png", sep = ""),
height = 4, width = 6.5)
print(run.plot)
dev.off()
}
# ==== end ====================================================================
